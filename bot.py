from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import asyncio
import logging
import pymysql
from aiogram.types import ParseMode

bot = Bot(token="6949035753:AAGF7-9NPJxkUbR8tpihp77IBRcYIRKRbCs")
from aiogram.contrib.fsm_storage.memory import MemoryStorage

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


kb1 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb1.add(KeyboardButton('–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'))

kb2 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
kb2.add(KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'))

KEY = 'RS95ass'

START = """
–ü—Ä–∏–≤—ñ—Ç!

–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ –∫—É—Ä—î—Ä–æ–º –≤ –Ω–∞—à–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ —à–≤–∏–¥–∫–æ—ó —ó–∂—ñ FoodGo

–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å–ª–∞—Å–∫–∞ –∫–ª—é—á —è–∫–∏–π –±—É–≤ –Ω–∞–¥–∞–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

–ü—Ä–∏–∫–ª–∞–¥: /RS95ass
"""

HELP = """
HElP TEXT
"""


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    chat_id = message.from_user.id
    await bot.send_message(chat_id=chat_id, text=START)


@dp.message_handler(commands=['help'])
async def help_message(message: types.Message):
    chat_id = message.from_user.id
    await bot.send_message(chat_id=chat_id, text=HELP)


@dp.message_handler(commands=[f'{KEY}'])
async def help_message(message: types.Message):
    chat_id = message.from_user.id
    try:
        conection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='',
            database='test-foodgo',
            cursorclass=pymysql.cursors.DictCursor
        )
        print('Conection')
        try:
            cursor = conection.cursor()
            add_user_query = f"insert into `couriers` (courer_name, courier_tg_id) value ('{message.from_user.first_name}', {message.from_user.id});"
            cursor.execute(add_user_query)
            conection.commit()
            await bot.send_message(chat_id=chat_id, text="–ö–ª—é—á—å –ø—Ä–∏–Ω—è—Ç!", reply_markup=kb1)
            await bot.send_message(chat_id=chat_id, text="–ì–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=kb1)
        finally:
            conection.close()
    except Exception as ex:
        print('No Conection')
        print(ex)
        await bot.send_message(chat_id=chat_id, text='Error!', reply_markup=kb1)
        await bot.send_message(chat_id=chat_id, text=ex, reply_markup=kb1)


from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
import pymysql

# –°—Ç–∞–Ω
class OrderStates(StatesGroup):
    choosing_order = State()

# –í–∏–≤–µ–¥–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–º–æ–≤–ª–µ–Ω—å
@dp.message_handler(lambda message: message.text == '–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', state="*")
async def show_orders(message: types.Message, state: FSMContext):
    chat_id = message.from_user.id
    try:
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='',
            database='test-foodgo',
            cursorclass=pymysql.cursors.DictCursor
        )
        cursor = connection.cursor()
        cursor.execute(
            f"""SELECT * FROM couriers 
            JOIN couriers_drive USING(courier_id) 
            JOIN orders USING(order_id) 
            WHERE courier_tg_id = {chat_id} AND order_status = 'On the way' 
            ORDER BY drive_id;"""
        )
        orders = cursor.fetchall()
        if not orders:
            await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î", reply_markup=kb1)
            return

        await state.update_data(orders=orders)
        await OrderStates.choosing_order.set()

        for order in orders:
            text = (
                f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['order_id']}\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {order['order_client_name']}\n"
                f"üìç –ê–¥—Ä–µ—Å–∞: {order['order_client_adress']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['order_client_phone']}\n"
                f"üíµ –û–ø–ª–∞—Ç–∞: {order['order_client_pay_method']}\n"
                f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {order['order_client_comment']}\n"
                f"üí∞ –¶—ñ–Ω–∞: {order['order_pice']} z≈Ç\n"
            )
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ #{order['order_id']}", callback_data=f"select_order_{order['order_id']}")
            )
            await bot.send_message(chat_id, text, reply_markup=keyboard)

    except Exception as ex:
        print("DB Error:", ex)
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—ñ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.callback_query_handler(lambda c: c.data.startswith('select_order_'), state=OrderStates.choosing_order)
async def finish_order(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    chat_id = callback_query.from_user.id
    message_id = callback_query.message.message_id
    order_id = int(callback_query.data.replace("select_order_", ""))

    try:
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='',
            database='test-foodgo',
            cursorclass=pymysql.cursors.DictCursor
        )
        cursor = connection.cursor()
        cursor.execute(
            f"UPDATE orders SET order_status = 'Delivered' WHERE order_id = {order_id};"
        )
        connection.commit()

        # üîÑ –†–ï–î–ê–ì–£–Ñ–ú–û –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî –∑–∞–º—ñ—Å—Ç—å –Ω—å–æ–≥–æ –±—É–¥–µ —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        )

        await OrderStates.choosing_order.set()

    except Exception as ex:
        print("DB Error:", ex)
        await bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")


if __name__ == '__main__':
    executor.start_polling(dp)
